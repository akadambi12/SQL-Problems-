Problem 1
For each department/warehouse location, retrieve the location ID, street address, postal code, city, state/province, and country name. 
Ensure your result set represents all locations even if the country ID for the location does not match an existing country ID in the countries table.

SELECT hr.locations.location_id, hr.locations.street_address, hr.locations.postal_code, hr.locations.city, hr.loactions.state/province, hr.countries.country_name
FROM hr.locations
LEFT JOIN hr.countries
ON hr.locations.country_id = hr.countries.country_id;



Problem 2
For each country ID, retrieve the location IDs, street addresses, postal codes, cities, states/provinces, and country names for department(s)/warehouse(s) that are tied to the respective country ID. 
Include country name data even if a department/warehouse is not currently located in the country.

SELECT  SELECT hr.locations.location_id, hr.locations.street_address, hr.locations.postal_code, hr.locations.city, hr.loactions.state/province, hr.countries.country_name
FROM hr.locations
LEFT JOIN hr.locations
ON hr.countries.country_id = hr.locations.country_id;


Problem 3
For each department, retrieve the department ID, department name, first name and last name of the manager heading the department, and the manager’s email address. In addition, include the street address, city, state/province, 
and country name for which the department is located. Sort/order the result set by department ID, ascending.

SELECT 
    d.department_id, 
    d.department_name, 
    e.first_name, 
    e.last_name, 
    e.email, 
    l.street_address, 
    l.city, 
    l.state_province, 
    c.country_name
FROM 
    hr.departments AS d
INNER JOIN 
    hr.employees AS e
ON 
    d.manager_id = e.employee_id
INNER JOIN 
    hr.locations AS l
ON 
    d.location_id = l.location_id
INNER JOIN 
    hr.countries AS c
ON 
    l.country_id = c.country_id
ORDER BY 
    d.department_id ASC;



Problem 4
Retrieve the customer ID, customer first name, customer last name, order ID, order date, and order total for all orders. 
Only include customers that have made an order. Sort the result set by customer ID (ascending) and order date (ascending).

SELECT 
    c.customer_id, 
    c.cust_first_name, 
    c.cust_last_name, 
    o.order_id, 
    o.order_date, 
    o.order_total
FROM 
    oe.customers AS c
INNER JOIN 
    oe.orders AS o 
ON 
    c.customer_id = o.customer_id
ORDER BY 
    c.customer_id ASC, 
    o.order_date ASC;



Problem 5
Retrieve the customer ID, customer first name, customer last name for customers that have not made an order.
Sort the result set by customer ID, ascending. Use a join in conjunction with a WHERE clause to achieve this. Do not use a subquery.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name
FROM oe.customers AS c
LEFT JOIN oe.orders AS o
ON oe.customers.customer_id=oe.order.customer_id
WHERE o.order_id IS NULL
ORDER BY c.customer_id ASC;


Problem 6
For each order, retrieve the order ID, order date, and line-item IDs associated with the order ID. In addition, for each of the line-items associated with an order ID, include the unit price, quantity, and the sale amount (unit price * quantity) for the line item. Provide the derived sale amount column with an alias of “sale_amount.”
Sort the result set by order date (ascending), order ID (ascending), and line-item ID (ascending).


SELECT 
    o.order_id, 
    o.order_date, 
    i.line_item_id, 
    i.unit_price, 
    i.quantity, 
    i.unit_price * i.quantity AS sale_amount
FROM 
    oe.orders AS o
INNER JOIN 
    oe.order_items AS i
ON 
    o.order_id = i.order_id
ORDER BY 
    o.order_date ASC, 
    o.order_id ASC, 
    i.line_item_id ASC;


Problem 7
Build onto your solution for problem 6. For each order, retrieve the order ID, order date, and line-item IDs associated with the order ID. In addition,
for each of the line-items associated with an order ID, include the product ID, product name, product description, unit price, quantity, and the sale amount (unit price * quantity) for the line item. 
Only include those records with a category ID of 19.
Provide the derived sale amount column with an alias of “sale_amount.” Sort the result set by order date (ascending), order ID (ascending), and line-item ID (ascending).

SELECT 
    o.order_id, 
    o.order_date, 
    i.line_item_id, 
    i.product_id,
    p.product_name,
    p.product_description,
    i.unit_price, 
    i.quantity, 
    i.unit_price * i.quantity AS sale_amount
FROM 
    oe.orders AS o
INNER JOIN 
    oe.order_items AS i
ON 
    o.order_id = i.order_id
INNER JOIN 
    oe.products AS p
ON 
    i.product_id = p.product_id
INNER JOIN 
    oe.categories AS c
ON 
    p.category_id = c.category_id
WHERE 
    c.category_id = 19
ORDER BY 
    o.order_date ASC, 
    o.order_id ASC, 
    i.line_item_id ASC;


Problem 8
For each customer ID, retrieve the product IDs and the total quantity ordered by the customer. 
For example, if customer 123 ordered 5 of product ABC on one occasion and 8 of product ABC on another occasion, then the record should as 123 for the customer ID,
ABC for the product ID, and 13 for the total quantity ordered for the item across all the customer’s orders.
Alias the summation as “total_ordered.” Sort the result set by customer ID (ascending) and product ID (ascending).


SELECT o.customer_id, 
       i.product_id, 
      SUM(i.quantity) AS total_ordered
FROM oe.orders AS o 
INNER JOIN oe.order_items AS i
ON o.oder_id=i.order_id 
GROUP BY o.customer_id, i.product_id
ORDER BY o.customer_id,i.product_id;



Problem 9
For each customer ID, compute/retrieve the total number of orders placed by year. 
To extract the year from the order date, use EXTRACT(YEAR FROM oe.orders.order_date).
Alias this derived column as “order_year.” Provide the alias of “order_count” to the number of orders placed by the customer for each year. 
Sort the result set by customer ID (ascending) and order year (ascending).

SELECT o.customer_id, EXTRACT(YEAR FROM oe.orders.order_date) AS order_year, COUNT(o.order_id) AS order_count
FROM oe.orders AS o
GROUP BY o.customer_id,EXTRACT(YEAR FROM oe.orders.order_date)
ORDER BY o.customer_id, order_year;


Problem 10
For each category ID, retrieve the category ID, parent category ID, category name, category description,
parent category name, and parent category description. Include all category IDs even if a parent category doesn’t exist. 
Each row should consist of child category and parent category (i.e., 1 level above the child) data. Alias the parent category name as 
“parent_category_name” and the parent category description as “parent_category_description.” Sort the result set by the child category ID, 
ascending.

SELECT c1.categoriy_id AS child_categroy_id 
       c1,parent_category_id, 
       c1.category_name, 
       c1.category_description, 
       c2.category_name AS parent_category_name,
       c2.category_description AS parent_category_description
FROM oe.categories_tab c1
LEFT JOIN oe_categories_tab  c2
ON c1.parent_category_id = c2.category_id
ORDER BY c1.child_category_id ASC;














