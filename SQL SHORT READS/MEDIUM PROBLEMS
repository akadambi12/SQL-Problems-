Problem 1
For each department/warehouse location, retrieve the location ID, street address, postal code, city, state/province, and country name. 
Ensure your result set represents all locations even if the country ID for the location does not match an existing country ID in the countries table.

SELECT hr.locations.location_id, hr.locations.street_address, hr.locations.postal_code, hr.locations.city, hr.loactions.state/province, hr.countries.country_name
FROM hr.locations
LEFT JOIN hr.countries
ON hr.locations.country_id = hr.countries.country_id;



Problem 2
For each country ID, retrieve the location IDs, street addresses, postal codes, cities, states/provinces, and country names for department(s)/warehouse(s) that are tied to the respective country ID. 
Include country name data even if a department/warehouse is not currently located in the country.

SELECT  SELECT hr.locations.location_id, hr.locations.street_address, hr.locations.postal_code, hr.locations.city, hr.loactions.state/province, hr.countries.country_name
FROM hr.locations
LEFT JOIN hr.locations
ON hr.countries.country_id = hr.locations.country_id;


Problem 3
For each department, retrieve the department ID, department name, first name and last name of the manager heading the department, and the manager’s email address. In addition, include the street address, city, state/province, 
and country name for which the department is located. Sort/order the result set by department ID, ascending.

SELECT 
    d.department_id, 
    d.department_name, 
    e.first_name, 
    e.last_name, 
    e.email, 
    l.street_address, 
    l.city, 
    l.state_province, 
    c.country_name
FROM 
    hr.departments AS d
INNER JOIN 
    hr.employees AS e
ON 
    d.manager_id = e.employee_id
INNER JOIN 
    hr.locations AS l
ON 
    d.location_id = l.location_id
INNER JOIN 
    hr.countries AS c
ON 
    l.country_id = c.country_id
ORDER BY 
    d.department_id ASC;



Problem 4
Retrieve the customer ID, customer first name, customer last name, order ID, order date, and order total for all orders. 
Only include customers that have made an order. Sort the result set by customer ID (ascending) and order date (ascending).

SELECT 
    c.customer_id, 
    c.cust_first_name, 
    c.cust_last_name, 
    o.order_id, 
    o.order_date, 
    o.order_total
FROM 
    oe.customers AS c
INNER JOIN 
    oe.orders AS o 
ON 
    c.customer_id = o.customer_id
ORDER BY 
    c.customer_id ASC, 
    o.order_date ASC;



Problem 5
Retrieve the customer ID, customer first name, customer last name for customers that have not made an order.
Sort the result set by customer ID, ascending. Use a join in conjunction with a WHERE clause to achieve this. Do not use a subquery.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name
FROM oe.customers AS c
LEFT JOIN oe.orders AS o
ON oe.customers.customer_id=oe.order.customer_id
WHERE o.order_id IS NULL
ORDER BY c.customer_id ASC;


Problem 6
For each order, retrieve the order ID, order date, and line-item IDs associated with the order ID. In addition, for each of the line-items associated with an order ID, include the unit price, quantity, and the sale amount (unit price * quantity) for the line item. Provide the derived sale amount column with an alias of “sale_amount.”
Sort the result set by order date (ascending), order ID (ascending), and line-item ID (ascending).


SELECT 
    o.order_id, 
    o.order_date, 
    i.line_item_id, 
    i.unit_price, 
    i.quantity, 
    i.unit_price * i.quantity AS sale_amount
FROM 
    oe.orders AS o
INNER JOIN 
    oe.order_items AS i
ON 
    o.order_id = i.order_id
ORDER BY 
    o.order_date ASC, 
    o.order_id ASC, 
    i.line_item_id ASC;


Problem 7
Build onto your solution for problem 6. For each order, retrieve the order ID, order date, and line-item IDs associated with the order ID. In addition,
for each of the line-items associated with an order ID, include the product ID, product name, product description, unit price, quantity, and the sale amount (unit price * quantity) for the line item. 
Only include those records with a category ID of 19.
Provide the derived sale amount column with an alias of “sale_amount.” Sort the result set by order date (ascending), order ID (ascending), and line-item ID (ascending).

SELECT 
    o.order_id, 
    o.order_date, 
    i.line_item_id, 
    i.product_id,
    p.product_name,
    p.product_description,
    i.unit_price, 
    i.quantity, 
    i.unit_price * i.quantity AS sale_amount
FROM 
    oe.orders AS o
INNER JOIN 
    oe.order_items AS i
ON 
    o.order_id = i.order_id
INNER JOIN 
    oe.products AS p
ON 
    i.product_id = p.product_id
INNER JOIN 
    oe.categories AS c
ON 
    p.category_id = c.category_id
WHERE 
    c.category_id = 19
ORDER BY 
    o.order_date ASC, 
    o.order_id ASC, 
    i.line_item_id ASC;


Problem 8
For each customer ID, retrieve the product IDs and the total quantity ordered by the customer. 
For example, if customer 123 ordered 5 of product ABC on one occasion and 8 of product ABC on another occasion, then the record should as 123 for the customer ID,
ABC for the product ID, and 13 for the total quantity ordered for the item across all the customer’s orders.
Alias the summation as “total_ordered.” Sort the result set by customer ID (ascending) and product ID (ascending).


SELECT o.customer_id, 
       i.product_id, 
      SUM(i.quantity) AS total_ordered
FROM oe.orders AS o 
INNER JOIN oe.order_items AS i
ON o.oder_id=i.order_id 
GROUP BY o.customer_id, i.product_id
ORDER BY o.customer_id,i.product_id;



Problem 9
For each customer ID, compute/retrieve the total number of orders placed by year. 
To extract the year from the order date, use EXTRACT(YEAR FROM oe.orders.order_date).
Alias this derived column as “order_year.” Provide the alias of “order_count” to the number of orders placed by the customer for each year. 
Sort the result set by customer ID (ascending) and order year (ascending).

SELECT o.customer_id, EXTRACT(YEAR FROM oe.orders.order_date) AS order_year, COUNT(o.order_id) AS order_count
FROM oe.orders AS o
GROUP BY o.customer_id,EXTRACT(YEAR FROM oe.orders.order_date)
ORDER BY o.customer_id, order_year;


Problem 10
For each category ID, retrieve the category ID, parent category ID, category name, category description,
parent category name, and parent category description. Include all category IDs even if a parent category doesn’t exist. 
Each row should consist of child category and parent category (i.e., 1 level above the child) data. Alias the parent category name as 
“parent_category_name” and the parent category description as “parent_category_description.” Sort the result set by the child category ID, 
ascending.

SELECT c1.categoriy_id AS child_categroy_id 
       c1,parent_category_id, 
       c1.category_name, 
       c1.category_description, 
       c2.category_name AS parent_category_name,
       c2.category_description AS parent_category_description
FROM oe.categories_tab c1
LEFT JOIN oe_categories_tab  c2
ON c1.parent_category_id = c2.category_id
ORDER BY c1.child_category_id ASC;



Problem 11
For customer ID 105, retrieve the customer ID, customer first name, customer last name, order ID, line-item ID, product ID,
product name, product description, unit price, and quantity for orders containing a line-item with a product name starting with “RAM.”

SELECT 
    c.customer_id,
    c.cust_first_name, 
    c.cust_last_name,
    o.order_id,
    i.line_item_id, 
    p.product_id, 
    p.product_name, 
    p.product_description, 
    i.unit_price, 
    i.quantity
FROM 
    oe.customers AS c
INNER JOIN 
    oe.orders AS o ON c.customer_id = o.customer_id
INNER JOIN 
    oe.order_items AS i ON o.order_id = i.order_id 
INNER JOIN 
    oe.products AS p ON i.product_id = p.product_id
WHERE 
    c.customer_id = 105
    AND p.product_name LIKE 'RAM%';


OPTIMZED CODE:
SELECT
    oe.customers.customer_id,        
    oe.customers.cust_first_name,
    oe.customers.cust_last_name,
    oe.orders.order_id,
    oe.order_items.line_item_id,
    oe.order_items.product_id,
    oe.product_information.product_name,
    oe.product_information.product_description,
    oe.order_items.unit_price,
    oe.order_items.quantity
FROM
    oe.customers
    INNER JOIN
    oe.orders
        ON oe.customers.customer_id = oe.orders.customer_id
        AND oe.customers.customer_id = 105
    INNER JOIN
    oe.order_items
        ON oe.orders.order_id = oe.order_items.order_id
    INNER JOIN
    oe.product_information
        ON oe.order_items.product_id = oe.product_information.product_id
        AND oe.product_information.product_name LIKE 'RAM%';



Problem 12
For each customer, compute/retrieve the average order total for the customer’s orders. Only include customers that have placed at least 1 order. Customer ID should be the first column in your output.
Alias the average order total as “avg_order_total.” Sort the result set by average order total, descending.

SELECT o.customer_id, AVG(o.order_total) AS avg_order_total
FROM oe.orders AS o
GROUP BY o.customer_id
HAVING COUNT(avg_order_total >=1
ORDER BY avg_orer_total DESC;


Problem 13
Compute/retrieve the number of orders place by customer income level. Include income levels even if no orders have been placed by customers with the corresponding income level. The income level category should be the first column in your result set. Alias the number of orders as “order_count.” Sort the result set by income level, ascending.

SELECT c.income_level, COUNT(o.order_id) AS order_count 
FROM oe.customers AS c
LEFT JOIN oe.orders AS o
ON c.customer_id = o.order_id
GROUP BY c.income_level
ORDER BY c.income_level ASC;


Problem 14
Write a query that returns a result set containing the customer ID, customer first name, customer last name, order ID, and order total for each customer order. Only include orders for married customers located in America. Sort the result set by order date, descending.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name, o.order_id, o.order_total
FROM oe.customers AS c
INNER JOIN oe.orders AS o
ON c.customer_id=o.customer_id
WHERE c.marital_status='married' 
AND c.nls_territory ='America'
ORDER BY o.order_date DESC; 



Problem 15
Write a query that returns a result set containing the order ID, order date, customer ID, line-item ID, product ID,
quantity, and unit price for all line-items with a quantity greater than 200 or those line-items with a unit price greater than $2,000. 
If an order has 5 line-items and only 2 of the line-items meet the criteria, then only 2 rows should be returned for the order
(i.e., 1 for each line-item). Sort the result set by order date, ascending.

SELECT o.oder_id, o.order_date, o.customer_id, i.line_item_id, i.product_id, i.unit_price, i.quantity
FROM oe.orders AS o
INNER JOIN oe.oreder_items AS i
ON o.order_id = i.order_id 
WHERE i.quantity>200
OR i.unit_price >2000
SORT BY o.order_date ASC; 



Problem 16
Write a query that returns a result set containing the customer ID, customer first name, customer last name, order ID, order date, and order total for each customer’s orders. Include customer data even if the customer hasn’t placed an order. If the customer hasn’t placed an order, then the customer’s order information should be NULL. Sort the result set by order date, ascending.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name, o.order_id, o.order_date, o.order_total
FROM  oe.customers AS c
LEFT JOIN oe.orders AS o
ON c.customer_id = o.customer_id 
ORDER BY o.order_date ASC;


Problem 17
Write a query that returns a result set containing the containing the number of orders placed for each NLS territory. Alias the number of orders placed as “order_count.” Include NLS territory values even if customers from the territory have not placed an order. Sort the result set by NLS Territory, ascending.

SELECT c.nls_territory, COUNT(o.order_id) AS order_count
FROM oe.customers AS c
LEFT JOIN oe.orders AS o
ON c.customer_id = o.customer_id
GROUP BY c.nls_territory 
ORDER BY c.nls_terrotory ASC: 



Problem 18
Write a query that returns a result set containing the containing the marital status, cheapest order made by a customer of the corresponding marital status, 
most expensive order made by a customer of the corresponding marital status, and the sum of all order total values for the corresponding marital status. Alias the cheapest order total as “cheapest_order,” most expensive order as “most_expensive_order,” and the sum of all order totals as “combined_order_total.”

SELECT c.marital_status, MIN(o.order_total) AS cheapest_order, MAX(o.order_total) AS most_expensive_order, SUM(o.order_total) AS combined_order_total
FROM oe.customers AS c 
INNER JOIN oe.orders AS o
ON c.customer_id = o.customer_id 
GROUP BY c.customer_id;

Problem 19
Write a query that returns a result set containing the customer ID, customer first name, customer last name, order ID, order date, and order total for all 
orders with an order total greater than or equal to 1.5 times the average order total. Sort the result set by order total, descending.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name, o.order_id, o.order_date, o.order_total 
FROM oe.customers AS c
INNER JOIN oe.orders AS o
ON c.customer_id = o.customer_id 
WHERE o.order_total >= ( 
              SELECT AVG(o.order_total) *1.5
              FROM oe.orders AS o
      )
ORDER BY o.order_total DESC;

















