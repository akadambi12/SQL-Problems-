Problem 1
Retrieve all employee’s first names from the employees table.

SELECT e.first_name
FROM employees as e;


Problem 2
Retrieve the employee ID, hire date, and the job ID for each employee.

SELECT e.employee_id, e.hire_date, e.job_id
FROM employees as e;


Problem 3
Retrieve the department ID, department name, manager ID, and location ID for each department.

SELECT *
FROM department;


Problem 4
Retrieve all employee IDs. Rename this column to read as “worker_id.”

SELECT e.employee_id AS worker_id
FROM employees AS e;


Problem 5
For each job, retrieve the job code, job title, minimum salary, and maximum salary. Rename these columns to read as job_code, title, minimum_salary, and maximum_salary, respectively.

SELECT j.job_id AS job_code, j.job_title AS title, j.min_salary AS minimum_salary, j.max_salary AS maximum_salary
FROM jobs AS j;


Problem 6: Retrieve the job ID, job title, maximum salary, minimum salary, and salary range for each job.
Salary range is defined as the difference between the maximum salary and minimum salary. Alias the difference as “salary_range.”

SELECT j.job_id , j.job_title , j.min_salary, j.max_salary, j.max_salary-j.min_salary AS salary_range
FROM jobs AS j;


Problem 7
Retrieve the country id and country name for each country.

SELECT DISTINCT c.country_id, c.country_name 
FROM countries;


Problem 8
Retrieve the employee ID, email, and phone number for each employee.

SELECT e.employee_id, e.email, e.phone_number
FROM employees AS e;


Problem 9
Retrieve the job ID, job title, and minimum salary for each job at the company.

SELECT j.job_id,	j.job_title, j.min_salary
FROM jobs AS j;


Problem 10
Retrieve the location ID, city, and state/province for all warehouse/department locations.

SELECT l.location_id, l.city, l.state_province
FROM locations AS l;


Problem 11
Retrieve the location ID, street address, city, and state/province for departments or warehouses located in Texas.

Solution:
SELECT l.location_id,	l.street_address, l.city, l.state_province
FROM locations AS l
WHERE l.state_province = 'Texas';


Problem 12
Retrieve the employee ID, job ID, and hire date for employees hired in year 2007 or later.

SELECT e.employee_ID, e.job ID, e.hire_date
FROM employees AS e
WHERE e.hire_date>= '2007';


Problem 13
Retrieve the department ID, department name, and location ID for departments/warehouses with location IDs other than 1700.

SELECT d.department _ID, d.department_name, and d.location_ID
FROM departments AS d
WHERE d.location_ID != '1700' ;


Problem 14
Retrieve the employee ID, first name, last name, and job ID for each programmer (i.e., those employees with a job ID of “IT_PROG.”

SELECT e.employee_ID, e.first_name, e.last_name, e.job_ID
FROM employees as e
WHERE e.job_ID='IT_PROG' ;


Problem 15
Retrieve the location ID, city, and state/province, and country ID for department/warehouse locations outside of the United States.

SELECT l.Location_id, l.city, l.state_province, l.country_id
FROM locations AS l
WHERE l.country_id != 'US' ;


Problem 16
Retrieve the employee ID, job ID, and salary for employees with a salary of greater than or equal to $10,000.

SELECT e.employee_id, e.job_id, e.salary 
FROM employees AS e
WHERE e.salary >= 10000 ;


Problem 17
Retrieve the location ID, city, state/province, and country ID for department/warehouse locations in the United States or Canada.

SELECT l.location_id, l.city, l.state_province, l.country_id
FROM locations AS l
WHERE l.country_id ='US' OR l.country_id='CA' ;

ALternate Answer: SELECT l.location_id, l.city, l.state_province, l.country_id
FROM locations AS l
WHERE l.country_id IN ('US','CA'); 



Problem 18
Retrieve the location ID, city, state/province, and country ID for department/warehouse locations outside the United States and Canada.

SELECT l.location_id, l.city, l.state_province, l.country_id
FROM locations AS l
WHERE l.country_id NOT IN ('US' , 'CA') ;


Problem 19
Retrieve the employee ID and salary for all associates with a salary between $6,000 and $10,000, inclusive.

SELECT e.employee_id, e.salary 
FROM employees AS e
WHERE e.salary BETWEEN 6000 AND 10000;


Problem 20
Retrieve the employee ID, first name, last name, job ID, hire date, and salary for all employees hired between 2004 and 2006, inclusive.

SELECT e.employee_id, e.frist_name, e.last_name, e.hire_date, e.salary 
FROM employees as e
WHERE e.hire_date BETWEEN '01-JAN-2004' AND '31-DEC-2006' ;


Problem 21
Retrieve the employee ID, job ID, and salary for employees with job IDs other than IT_PROG, SA_MAN, and PU_CLERK.

SELECT e.employee_id, e.job_id, e.salary 
FROM employees AS e
WHERE e.job_id NOT IN ('IT_PROG' , 'SA_MAN', 'PU_CLERK');


Problem 22
Retrieve the employee ID, job ID, hire date, and salary for employees with salaries between $15,000 and $30,000, inclusive.

SELECT e.employee_id, e.job_id, e.hire_date, e.salary 
FROM employees AS e
WHERE e.salary BETWEEN 15000 AND 30000;


Problem 23
Retrieve the employee ID and first names of employees with a first name starting with the letter ‘A.’

SELECT e.employee_id, e.first_name
FROM employees AS e
WHERE e.first_name LIKE 'A%';


Problem 24
Retrieve the employee ID and first names of employees with a first name starting with the letter ‘C’ followed by any sequence of characters and ending with the letter ‘s.’
SELECT e.employee_id, e.first_name
FROM employees AS e
WHERE e.first_name LIKE 'C%s';


Problem 25
Retrieve employee phone numbers where the first digit is a 5, 3rd to last digit is a 1, second to last digit is any number, and the final digit is a 9.

SELECT e.phone_number
FROM employees AS e
WHERE e.phone_number LIKE '5%1_9' ; 


Problem 26
Retrieve the employee ID and last name of employees with a last name not starting with the letter ‘B.’

SELECT e.employee_id, e.last_name
FROM employees AS e
WHERE e.last_name NOT LIKE 'B%' ;


Problem 27
Retrieve all employee IDs for employees with a phone number containing the sequence of digits, 423.

SELECT e.employee_id 
FROM employees AS e
WHERE e.phone_number LIKE '%423%' ; 


Problem 28
Retrieve the employee ID and job ID for those employees with job IDs starting with the letters ‘AD.’

SELECT e.employee_id, e.job_id
FROM employees AS e 
WHERE e.job_id LIKE 'AD%' ; 


Problem 29
Retrieve the employee ID and salary for employees with a salary starting with the 1 digit followed by a single digit of any value and ending with 3 zeros (e.g., 14000).

SELECT e.employee_id, e.salary
FROM employees AS e
WHERE e.salary LIKE '1_000';


Problem 30
Retrieve the country ID and country name for country names starting with ‘A’ and ending in ‘a.’
SELECT c.country_id, c.country_name
FROM countries AS c
WHERE c.country_name LIKE 'A%a';


Problem 31
Retrieve the employee ID and phone number of employees where the phone number doesn’t begin with ‘650.’

SELECT e.employee_id,e.phone_number
FROM employees AS e
WHERE e.phone_number NOT LIKE '650%';


Problem 32
Retrieve the department ID, department name, and manager ID for departments without a manager ID assigned.

SELECT d.department_id, d.department_name, d.manager_id 
FROM departments AS d
WHERE d.manager_id IS NULL;


Problem 33
Retrieve the department ID, department name, and manager ID for departments with a manager ID assigned.

SELECT d.department_id, d.department_name, d.manager_id
FROM departments AS d
WHERE d.manager_id IS NOT NULL;


Problem 34
Retrieve the employee ID and commission percentage for those employees with existing commission percentages

SELECT e.employee_id, e.commission_pct
FROM employees AS e
WHERE e.commission_pct IS NOT NULL;


Problem 35
Retrieve the employee ID and commission percentage for those employees with non-existing commission percentages.

SELECT e.employee_id, e.commission_pct
FROM employees AS e
WHERE e.commission_pct IS NULL ;


Problem 36
Retrieve the employee ID, job ID, salary, and manager ID for all employees with a manager ID of 100 or 108 and a salary greater than $12,000.

SELECT e.employee_id, e.job_id, e.manager_id, e.salary 
FROM employees AS e
WHERE e.salary>12000 AND e.manager_id IN (100,108);


Problem 37
Retrieve the job ID, job title, minimum salary, and maximum salary for management jobs or those jobs with a minimum salary greater than 20,000 and a maximum salary greater than 25,000.

SELECT j.job_id, j.job_title,	j.min_salary,	j.max_salary
FROM jobs AS j
WHERE j.job_title LIKE '%Manager%' OR (j.min_salary>20000 AND j.max_salary>25000) ;


Problem 38
Retrieve the employee ID, job ID, and department ID employees for employees that meet one or more of the following conditions:
Department ID is equal to 90 and the job ID is equal to ‘AD_PRES’
Department ID is equal to 100 and the job ID is equal to ‘FI_ACCOUNT’
Employee ID is equal to 115

SELECT e.employee_id, e.job_id, e.department _id
FROM employees AS e
WHERE (e.department _id=90 AND e.job_id =‘AD_PRES’) OR 
      (e.department _id=100 AND e.job_id =‘FI_ACCOUNT’) OR 
       e.employee_id=115 ;                                          * *assuming 115 is not string. 


Problem 39
Retrieve the employee ID, hire date, job ID, and salary for employees hired on as programmers in year 2007.

SELECT e.employee_id, e.hire_date, e.job_id, e.salary
FROM employees AS e
WHERE YEAR(e.hire_date) = 2007 AND e.job_id='IT_PROG' ; 


Problem 40
Retrieve the employee ID, hire date, job ID, and salary for employees that were hired on as programmers or in the year 2007.

SELECT e.employee_id, e.hire_date, e.job_id, e.salary
FROM employees AS e
WHERE YEAR(e.hire_date)=2007 OR e.job_id='IT_PROG';


Problem 41
Retrieve the employee ID, hire date, job ID, and salary for employees that were hired in year 2007 or were hired on as programmers with a salary greater than 5000.

SELECT e.employee_id, e.hire_date, e.job_id, e.salary
FROM employees AS e
WHERE YEAR(e.hire_date)=2007 OR (e.job_id='IT_PROG' AND e.salary>5000);


Problem 42
Retrieve the employee ID, hire date, job ID, manager ID, and salary for employees that were hired in year 2007 or were hired on as programmers with a salary 
greater than 5000 or employees without a manager ID assigned and with a salary greater than 5000.


SELECT e.employee_id, e.hire_date, e.job_id, e.salary 
FROM employees AS e
WHERE YEAR(e.hire_date)=2007 OR 
          (e.job_id='IT_PROG' AND e.salary>5000) OR 
          (e.manager_id IS NULL AND e.salary > 5000); 


Problem 43
Retrieve the minimum salary, maximum salary, average salary, and total sum of salaries. Provide appropriate aliases for the aggregations.

SELECT MIN(e.salary) AS minimum_salary,
       MAX(e.salary) AS maximum_salary,
       AVG(e.salary) AS average_salary,
       SUM(e.salary) AS total_salary
FROM employees AS e;


Problem 44
For each job ID, compute the average employee salary with respect to the job ID. Provide an appropriate alias for the aggregation.

SELECT e.job_id, AVG(e.salary) AS average_salary
FROM employees AS e
GROUP BY e.job_id;


Problem 45
For each job ID, compute the minimum and maximum salary with respect to the job ID. Provide appropriate aliases for the aggregations.

SELECT e.job_id, MIN(e.salary) AS minimum_salary, MAX(e.salary) AS maximum_salary
FROM employees AS e
GROUP BY job_id;


Problem 46
For each existing job ID and manager ID combination, compute the number of employees and the average salary for those employees. Provide appropriate aliases for the aggregations.

SELECT e.job_id, e.manager_id, AVG(e.salary) AS average_salary, COUNT(e.salary) AS employee_count
FROM employees AS e
GROUP BY e.job_id,e.manager_id;


Problem 47
For each region ID, compute the number of countries assigned the region ID. Provide an appropriate alias for the aggregation.

SELECT c.region_id, COUNT(c.country_name) AS number_of_countries
FROM countries AS c
GROUP BY c.region_id; 


Problem 48
For each manager ID, compute the number of employees assigned the manager ID. Provide an appropriate alias for the aggregation.

SELECT e.manager_id, COUNT(e.employee_id) AS employee_count
FROM employees AS e 
GROUP BY e.manager_id;


Problem 49
For each manager ID, compute the maximum salary for employees assigned the manager ID. Provide an appropriate alias for the aggregation.

SELECT e.manager_id, MAX(e.salary) AS maximum_salary_of_employee
FROM employees AS e
GROUP BY e.manager_id;


Problem 50
For each country ID and state/province combination, compute the number of department/warehouse locations. Provide an appropriate alias for the aggregation.

SELECT l.country_id, l.state_province, COUNT(l.location_id) AS location_count
FROM locations AS l
GROUP BY l.country_id, l.state_province;


Problem 51
For each job ID, compute the minimum and maximum salary with respect to the job ID. Return only job IDs with an range (MAX Salary – MIN Salary for each job ID) of 
salaries greater than or equal to $3,000. Provide appropriate aliases for the aggregations.

SELECT e.job_id, MAX(e.salary) AS max_salary, MIN(e.salary) AS min_salary
FROM employees AS e
GROUP BY job_id
HAVING (MAX(e.salary)- MIN(e.salary)) >= 3000 ;


Problem 52
For each existing job ID and manager ID combination, compute the number of employees and the average salary for those employees. Return only those job ID and
manager ID combinations for which at least two employees are employed under the respective job ID and manager ID combination. Provide appropriate aliases for the aggregations.

SELECT e.job_id, e.manager_id, COUNT(e.employee_id) AS employee_count, AVG(e.salary) AS average_salary
FROM employees AS e
GROUP BY e.job_id, e.manager_id
HAVING COUNT(e.employee_id) >=2; 


Problem 53
Retrieve the department ID(s) and the sum of the employees’ salaries for each department ID for departments with a total salary of greater than $100,000. 
Provide an appropriate alias for the aggregation.

SELECT e.department_id, SUM(e.salary) AS total_department_salary
FROM employees AS e
GROUP BY e.department_id
HAVING SUM(e.salary) > 100000; 


Problem 54
Retrieve the department IDs and the number of employees where more than 5 employees are assigned/work in. Provide an appropriate alias for the aggregation.

SELECT e.department_id, COUNT(e.employee_id) AS employee_count
FROM employees AS e
GROUP BY e.department_id
HAVING COUNT(e.employee_id) > 5; 


Problem 55
Retrieve the employee ID(s) and number of jobs each employee has held for employees that have held more than 2 jobs. Provide an appropriate alias for the aggregation.

SELECT e.employee_id, COUNT(e.job_id) AS job_count
FROM employees AS e
GROUP BY e.employee_id
HAVING COUNT(e.job_id) > 2;


Problem 56
Retrieve employee IDs, job IDs, hire dates, and salaries for all employees. Sort/order the result set by hire date in ascending order and by salary in descending order.

SELECT e.employee_id, e.job_id, e.hire_date, e.salary 
FROM employees AS e
ORDER BY e.hire_date ASC, e.salary DESC;


Problem 57
Retrieve country IDs, country names, and region IDs for all countries. Sort/order the result set by region ID in ascending order and by country name in ascending order.

SELECT c.country_id, c.country_name, c.region_id 
FROM countries AS c
ORDER BY c.region_id ASC, c.country_name ASC;


Problem 58
Retrieve the employee ID and hire date for each employee. Sort/order the result set by hire date in ascending order (i.e., oldest to newest).

SELECT e.employee_id, e.hire_date
FROM employees AS e
ORDER BY e.hire_date ASC;


Problem 59
Retrieve the employee ID, job ID, and salary for each employee. Sort/order the result set by salary in descending order (i.e., largest salary to smallest salary).

SELECT e.employee_id, e.job_id, e.salary 
FROM employees AS e
ORDER BY e.salary DESC;


Problem 60
Retrieve the manager ID, employee ID, and salary for each employee. Sort/order the result set by manager ID (ascending) and within each manager, sort employee salaries in descending order.

SELECT e.manager_id, e.employee_id, e.salary
FROM employees AS e
ORDER BY e.manager_id ASC, e.salary DESC; 


Problem 61
For each country ID, return the number of departments/warehouses. Sort/order the result set by the number of departments/warehouses located in each country.
Provide an appropriate alias for the aggregation.

SELECT l.country_id, COUNT(l.location_id) AS warehouse_count
FROM locations AS l
GROUP BY l.country_id
ORDER BY warehouse_count DESC;


Problem 62
Write a query that returns a result set containing, for each product, the product ID, product name, product description, list price, and minimum price.
In addition, include a derived column containing the difference between the listing price and the minimum price. Alias this column as “amount_above_min.”

SELECT p.product_id, p.product_name, p.product_description, p.list_price, p.min_price, p.list_price - p.min_price AS amount_above_min
FROM product_information AS p;


Problem 63
Write a query that returns a result set containing, for each customer, the customer ID, customer first name, 
customer last name, and credit limit. Only include customers with a last name starting with ‘A’ that also have a credit limit less than or equal to 1200. 
Sort the result set by credit limit, ascending.

SELECT c.customer_id, c.cust_first_name, c.cust_last_name, c.credit_limit
FROM customers AS c
WHERE c.cust_last_name LIKE 'A%' AND c.credit_limit <= 1200
ORDER BY c.credit_limit ASC;


Problem 64
Write a query that returns a result set containing, for each order, the order ID, order date, and order total. Only include orders placed in year 2008 and later 
with an order total greater than $50,000 or for those orders placed in year 2007 with an order total greater than $25,000. Sort the result set by order date (ascending) and by order total (descending).

SELECT o.order_id, o.order_date, o.order_total
FROM orders AS o
WHERE (YEAR(o.order_date)=2007 AND o.order_total>25000) OR (YEAR(o.oder_date)>=2008 AND o.order_total>50000)
ORDER BY o.order_date ASC, o.order_total DESC;

Problem 65
Write a query that returns a result set containing the number of customers for each gender and credit limit combination.
Gender and credit limit data should be included in the result set. Sort the result set by credit limit (ascending) and gender (ascending).

SELECT c.gender, COUNT(c.gender) AS gender_count, c.credit_limit
FROM customers AS c
GROUP BY c.gender, c.credit_limit
ORDER BY c.credit_limit ASC, c.gender ASC;

Problem 66
Write a query that returns a result set containing the number of customers for each natural language support territory (nls_territory), gender, and credit limit combination.
NLS territory, gender, and credit limit data should be included in the result set. Only include those combinations for which a single customer is aligned/belongs. 
Sort the result set by NLS territory (ascending), credit limit (ascending), and gender (ascending).

SELECT  c.gender, c.credit_limit, COUNT(*) AS cust_count
FROM customers AS c
GROUP BY c.nls_territory, c.gender, c.credit_limit
HAVING COUNT(*) = 1
ORDER BY c.nls_territory ASC, c.credit_limit ASC, c.gender ASC;

*** NOTE: COUNT(*) AS cust_count: The function COUNT(*) counts the number of customers in each group. The alias cust_count makes it clear what this column represents.
          HAVING COUNT(*) = 1: This clause is used to filter the grouped results to include only those groups where exactly one customer is present, which aligns 
          with the requirement to include only combinations with a single customer.


Problem 67
For each order, retrieve the order ID, order date, customer ID, order total, and sales rep ID. Sort the result set by customer ID (ascending) and order date (ascending).

SELECT o.oder_total, o.oder_ID, o.order_date, o.customer_ID, o.sales_rep_id
FROM orders AS o
ORDER BY o.customer_id ASC, o.order_date ASC;


Problem 68
Retrieve only those orders with an order total greater than $100,000. Include the order ID, order date, customer ID, order total, and sales rep ID for each order. 
Sort the result set by customer ID (ascending) and order date (ascending).

SELECT o.order_id, o.order_date, o. customer_id, o.order_total, o.sales_rep_id
FROM orders AS o
WHERE o.order_total > 100000
ORDER BY o.cusotmer_id ASC. o.order_date ASC;


Problem 69
For each order, retrieve the order ID, line-item ID, product ID, unit price, and quantity of the first line item.

SELECT oi.oder_id, oi.line_item_id, oi. product_id, oi.unit_price, oi.quantity
FROM order_items AS oi
WHERE oi.line_item_id=1;


Problem 70
For each order, retrieve the order ID, order date, and order total. Only include those orders with an order total between $75,000 and $100,000, inclusive. 
Sort the result set by order total, descending.

SELECT o.order_id, o.order_date, o.order_total
FROM orders AS o
WHERE o.order_total BETWEEN 75000 AND 100000
ORDER BY o.order_total DESC;



Problem 71
Retrieve all customers with a national language support territory (nls_territory) of America, India, or China. Include the customer ID, 
customer first name, customer last name, and NLS territory for each customer. Sort the result set by NLS territory (ascending) and customer ID (ascending).

SELECT c.customer_id, c.cust_first_name, c.cust_last_name, c.nls_territory
FROM customers AS c
WHERE c.nls_territory IN ('America', 'India', 'China')
ORDER BY c.nls_territory ASC, c.customer_id ASC;


Problem 72
Retrieve product information for all products with product names starting with ‘Inkjet.’ Include the product ID, product name, and product description for each product.

SELECT pi.product_id, pi.product_name, pi.product_description
FROM product_information AS pi
WHERE pi.product_name LIKE 'Inkjet%';


Problem 73
Retrieve the product ID, supplier ID, and catalog URL for products with a catalog URL containing the string, 102094.

SELECT pi.product_id, pi.supplier_id, pi.catelog_url
FROM product_information AS pi
WHERE pi.catalog_url LIKE '%102094%';


Problem 74
Retrieve the order ID, order date, order total, customer ID, and sales rep ID. Only include online orders in your result set. Assume all orders without a sales rep ID are online orders.

SELECT o.order_id, o.order_date, o.order_total, o.customer_id, o.sales_rep_id
FROM orders AS o
WHERE o.order_mode = 'online'; 

Aletrnate Answer: 
SELECT o.order_id, o.order_date, o.order_total, o.customer_id, o.sales_rep_id
FROM orders AS o
WHERE o.sales_rep_id IS NULL;



Problem 75
Retrieve online orders. Only include online orders placed in year 2007 or online orders with an order total greater than or equal to $100,000. 
Include the order ID, order date, order total, and sales rep ID for each online order. Assume all orders without a sales rep ID are online orders. Sort the result set by order date, ascending.

SELECT o.order_id, o.order_date, o.order_total, o.sales_rep_id
FROM orders AS o
WHERE o.order_mode = 'online' AND ((YEAR(o.order_date)=2007) OR o.order_total>=100000);



Problem 76
Retrieve product information for products that have a minimum price greater than or equal to $1,000 or less than or equal to $10.
In addition, only include products with a category ID of 19. Include the product ID, product name, category ID, and minimum price for each product. Sort the result set by minimum price, descending.

SELECT pi.product_id, pi.product_name, pi.category_id, pi.min_price 
FROM product_information AS pi
WHERE (pi.min_price =1000 OR pi.min_price <=10) AND pi.category_id =19 
ORDER BY pi.min_price DESC;



Problem 77
Compute/retrieve the minimum order total, maximum order total, sum of all order totals, the number of orders placed, and the average of all order totals. 
Provide meaningful aliases/names to the derived columns.

SELECT MIN(o.order_total) AS min_order_total, MAX(o.order_total) AS Max_order_total, SUM(o.order_total) AS sum_order_total, COUNT(o.order_id) AS order_count, AVG(o.order_total) AS average_order_total 
FROM orders AS o;


Problem 78
For each customer, compute/retrieve the minimum order total, maximum order total, sum of all order totals, the number of orders placed, and the average of all order totals. 
Provide meaningful aliases/names to the derived columns. The customer ID should be the first column in your result set. Sort the result set by the sum of order totals, descending.

SELECT o.customer_id, MIN(o.order_total) AS min_order_totla, MAX(o.order_total) AS max_order_total, SUM(o.order_total) AS sum_order_total, COUNT(o.order_id), AVG(o.order_id) AS avg_order_toal
GROUP BY o.customer_id
ORDER BY sum_order_total DESC:



Problem 79
For each product ID, compute/retrieve the number orders placed for that item. 
The product ID should be the first column in your result set. Provide a meaningful alias/name to the derived column. Sort the result set by the number of times a product was ordered, descending.

SELECT pi.product_id, COUNT(pi.product_id) AS product_count
FROM product_information AS pi
ORDER BY product_count DESC;


Problem 80
For each existing account manager ID and credit limit combination, compute/retrieve the number of customers aligned to the manager ID and credit limit combination.
Account manager ID and credit limit should be included in your result set. Provide a meaningful alias/name to the derived column. 
Sort the result set by account manager ID (ascending) and by credit limit (descending).


SELECT c.manager_id, c.credit_limit, COUNT(c.customer_id) AS customer_count
FROM customers AS c
GROUP BY c.manager_id, c.credit_limit
ORDER BY c.manager_id ASC, c.credit_limit DESC;



Problem 81
Retrieve the number of products containing product information for each product category ID. Only include those product category IDs with more than 25 products aligned
to the product category ID. The product category ID should be the first column in your result set. Provide a meaningful alias/name to the derived column. 
Sort the result set by the number of products in each product category ID, descending.

SELECT pi.category_id, COUNT(pi.product_id) AS product_count 
FROM product_information AS pi
HAVING  COUNT(pi.product_id)>25
GROUP BY pi.category_id 
ORDER BY product_count DESC;


Problem 82
For each customer that has placed an order, compute/retrieve the date the customer made their first order and the sum of all order totals.
Only include customers that made their first order before year 2007 and have a sum of all order totals greater than $150,000. 
The customer ID should be the first column in your result set. Provide meaningful aliases/names to the derived columns. Sort the result set by the first order’s order date.

SELECT o.customer_id, MIN(o.order_date) AS first_order, SUM(o.order_total) AS order_sum
FROM orders AS o
HAVING order_sum>150000 AND MIN(o.order_date) < '01-JAN-2007'
GROUP BY o.customer_id
ORDER BY o.order_date ASC;


Problem 83
Retrieve the daily product category sales for April 2023. In the output, include the report date, product category, and total sales. Sort the result set in ascending order by report date and product category.

SELECT na.report_date, na.product_category, na.total_sales
FROM north_america_sales AS na
WHERE na.report_date BETWEEN '01-APR-2023' AND '30-APR-2023'
SORT BY na.report_date, na.product_category;



Problem 84
Building onto your solution from problem 83, retrieve only those daily sales for the Software product category. Remove the sorting based on product category.

SELECT na.report_date, na.product_category, na.total_sales
FROM north_america_sales AS na
WHERE (na.report_date BETWEEN '01-APR-2023' AND '30-APR-2023') AND na.product_category='software';


Problem 85
Compute the total sales across all product categories for each day occurring in the months of July, August, and September of 2023. 
Alias the computed sale amount column as ‘daily_total_sale’. In the output, include the report date and daily total sales. Sort the result set in ascending order by report date.

SELECT na.report_date,SUM(na.total_sale) AS sum_total_sales
FROM north_america_sales
WHERE na.report_date BETWEEN '01-JUL-2023' AND '30-SEP-2023' 
GROUP BY na.report_date
SORT BY na.report_date ASC;

Problem 86
Building onto your previous solution from problem 85, only include those days where the daily total sales amount is greater than 1,000,000. Sort the result set in ascending order by report date.

SELECT na.report_date,SUM(na.total_sale) AS sum_total_sales
FROM north_america_sales
WHERE (na.report_date BETWEEN '01-JUL-2023' AND '30-SEP-2023') 
HAVING  sum_total_sales > 1000000
GROUP BY na.report_date
SORT BY na.report_date ASC;

Problem 87
For each member type, compute the total number of members. Alias the total number of members of each member type as “member_count.” In the output, include the member type ID and member count. Sort the result set in descending order by member_count.

SELECT m.member_id, COUNT(m.member_id) AS member_count 
FROM member AS m
GROUP BY m.member_type_id
ORDER BY member_count DESC;


Problem 88
For each employee, compute the total number of members enrolled. Alias the total number of members of each member type as “enrollment_count.” In the output, include the employee ID and enrollment count. Sort the result set in descending order by enrollment_count.

SELECT m/employee_id, m.COUNT(member_id) AS enrollment_count
FROM members AS m
GROUP BY m.employee_id
ORDER BY enrollment_count DESC:


Problem 89
Compute the average, minimum, maximum, and range (i.e., maximum – minimum) of using all the prices of all products. Provide meaningful aliases/names to the derived columns.

SELECT  AVG(p.price) AS Average_price, MIN(p.price) AS minimum_price, MAX(p.price) AS maximum_price,MAX(p.price) - MIN(p.price) AS price_range
FROM products AS p;


Problem 90
Write a query that returns a result set containing the product ID, description, and price for those products with a description containing the sequence of characters, “Chocolate.”

SELECT p.product_id, p.description, p.price
FROM products AS p
WHERE p.description LIKE '%Chocolate%';


Problem 91
Compute the number of members enrolled each day based on the member enrollment date values. Alias the number of members enrolled as “enrollment_count.” In the output, include the enrollment
date and enrollment count. Sort the result set in ascending order by enrollment_date.

SELECT member.enrollment_date, COUNT(member.member_id) AS enrollment_count
FROM member
GROUP BY member.enrollment_date
ORDER BY member.enrollment_date;



Problem 92
Building onto your previous solution from problem 91, only include those days where the number of members enrolled is at least 3.

SELECT member.enrollment_date, COUNT(member.member_id) AS enrollment_count
FROM member
GROUP BY member.enrollment_date
HAVING COUNT(member.member_id) >= 3
ORDER BY member.enrollment_date;


Problem 93
Retrieve member details for those members enrolled by the employee with an ID value of 1 or with an enrollment date occurring within the month
of March 2024. In the output, include the member ID, member type ID, enrollment date, email address, and employee ID.

SELECT member.member_id, member.member_type_id, member.enrollment_date, member.email_address, member.employee_id
FROM member
WHERE member.employee_id = 1 OR (enrollment_date >= '01-MAR-24' AND enrollment_date < '01-APR-24');



Problem 94
Compute the number of members associated with each member type. Alias the number of members as “member_count.” 
In the output, include the member type ID and member count. Sort the result set in ascending order by member type ID.

SELECT member.member_type_id, COUNT(member.member_id) AS member_count
FROM member
GROUP BY member.member_type_id
ORDER BY member_type_id;



Problem 95
Write a query that returns a result set containing the employee ID, last name, first name, 
hire date, job ID, and salary for those employees hired prior to the ice cream shop’s opening date (i.e., January 1, 2024).

SELECT employee.employee_id, employee.last_name, employee.first_name, employee.hire_date, employee.job_id, employee.salary
FROM employee
WHERE employee.hire_date < '01-JAN-24';

Problem 96
Adjust your solution to problem 96 to compute the number of employees hired prior to the ice cream shop’s opening date (i.e., January 1, 2024). Alias the number of employees hired as “employee_count.”

SELECT COUNT(employee.employee_id) AS employee_count
FROM employee
WHERE employee.hire_date < '01-JAN-24';


Problem 97
Building onto your solution to the previous problem, break out the total number of employees hired by job ID value. There should be one row per job ID value and the corresponding employee count.

SELECT employee.job_id, COUNT(employee.employee_id) AS employee_count
FROM employee
WHERE employee.hire_date < '01-JAN-24'
GROUP BY employee.job_id;


Problem 98
Compute the average salary for each job. Only include those job ID values where more than one employee holds the corresponding job. 
Alias the average salary column as “average_salary.” In the output, include the job ID corresponding average salary.

SELECT employee.job_id, AVG(employee.salary) AS average_salary
FROM employee
GROUP BY employee.job_id
HAVING COUNT(employee.employee_id) > 1;


Problem 99
Compute the ice cream shop’s daily sales. Alias the daily sales column as “daily_sales.” In the output, include the purchase date and daily sales. 
Sort the result set in ascending order by purchase date.

SELECT purchase_date, SUM(purchase_total) AS daily_sales
FROM purchase
GROUP BY purchase_date
ORDER BY purchase_date;

Problem 100
Retrieve the purchase details for purchases where the total purchase value exceeds $10, and the purchase date is in January 2024. In the output, 
include the purchase ID, member ID, purchase date, employee ID, and purchase total. Sort the result set in ascending order by purchase date.

SELECT p.purchase.purchase_id, p.purchase.member_id,  p.purchase.purchase_date, p.purchase.employee_id, p.purchase.purchase_total
FROM purchase AS p
WHERE p.purchase_total >= 10
    AND p.purchase_date >= '01-JAN-24'
    AND p.purchase_date < '01-FEB-24'
ORDER BY p purchase_date;



Problem 101
For each member, compute the total amount spent. Alias this computed amount as “total_sales.” In the output, include the member ID and total sales.
Sort the result set in descending order by total sales.

SELECT purchase.member_id, SUM(purchase.purchase_total) AS total_sales
FROM purchase
GROUP BY purchase.member_id
ORDER BY SUM(purchase.purchase_total) DESC;


Problem 102
Building onto your solution to the previous problem, only include those members with a total sales value greater than or equal to $50 and more than three purchases.

SELECT purchase.member_id, SUM(purchase.purchase_total) AS total_sales
FROM purchase
GROUP BY purchase.member_id
HAVING SUM(purchase.purchase_total) >= 50AND COUNT(purchase.purchase_id) > 3
ORDER BY SUM(purchase.purchase_total) DESC;


Problem 103
Compute the distinct number of times each product has been purchased. Alias this computed value as “purchase_count.” In the output, include the product 
ID and purchase count. Sort the result set in descending order by purchase count.

SELECT purchase_item.product_id, COUNT(purchase_item.purchase_id) AS purchase_count
FROM purchase_item
GROUP BY purchase_item.product_id
ORDER BY COUNT(purchase_item.purchase_id) DESC;


Problem 104
For each purchase, compute the total number of items purchased based on quantity. Alias this computed value as “item_count.”
In the output, include the purchase ID and item count. Sort the result set in descending order by item count.

SELECT purchase_item.purchase_id, SUM(purchase_item.quantity) AS total_quantity
FROM purchase_item
GROUP BY purchase_item.purchase_id
ORDER BY SUM(purchase_item.quantity) DESC;


Problem 105
Retrieve the purchase ID values for those purchases containing product ID values 1, 4, or 8. In the output, include the purchase ID.

SELECT DISTINCT purchase_item.purchase_id
FROM purchase_item
WHERE purchase_item.product_id IN (1, 4, 8);



































